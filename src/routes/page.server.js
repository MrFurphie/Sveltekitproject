/* App.svelte generated by Svelte v3.44.3 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	check_outros,
	create_bidirectional_transition,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "svelte/internal";

import { slide } from 'svelte/transition';

function create_if_block(ctx) {
	let ul;
	let ul_transition;
	let current;

	return {
		c() {
			ul = element("ul");

			ul.innerHTML = `<li>Home</li> 
		<li>About</li> 
		<li>Projects</li> 
		<li>Contact</li>`;
		},
		m(target, anchor) {
			insert(target, ul, anchor);
			current = true;
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!ul_transition) ul_transition = create_bidirectional_transition(ul, slide, {}, true);
				ul_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!ul_transition) ul_transition = create_bidirectional_transition(ul, slide, {}, false);
			ul_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			if (detaching && ul_transition) ul_transition.end();
		}
	};
}

function create_fragment(ctx) {
	let nav;
	let button;
	let t1;
	let current;
	let mounted;
	let dispose;
	let if_block = /*isExpanded*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			nav = element("nav");
			button = element("button");
			button.textContent = "Menu";
			t1 = space();
			if (if_block) if_block.c();
		},
		m(target, anchor) {
			insert(target, nav, anchor);
			append(nav, button);
			append(nav, t1);
			if (if_block) if_block.m(nav, null);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*clickHandler*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*isExpanded*/ ctx[0]) {
				if (if_block) {
					if (dirty & /*isExpanded*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(nav, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(nav);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let isExpanded = false;

	function clickHandler() {
		$$invalidate(0, isExpanded = !isExpanded);
	}

	return [isExpanded, clickHandler];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;